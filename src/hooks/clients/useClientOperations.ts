
import { toast } from 'sonner';
import { Client } from '@/types';
import { services } from '@/mock/services';
import { FormData } from './useClientFormState';
import { 
  addClient as addClientToSupabase, 
  updateClient as updateClientInSupabase,
  deleteClient as deleteClientFromSupabase
} from '@/utils/clients';

interface UseClientOperationsProps {
  clients: Client[];
  setClients: React.Dispatch<React.SetStateAction<Client[]>>;
  resetForm: () => void;
  setIsAddClientOpen: (isOpen: boolean) => void;
  setIsEditClientOpen: (isOpen: boolean) => void;
  setIsDeleteClientOpen: (isOpen: boolean) => void;
  setSelectedClient: (client: Client | null) => void;
}

export const useClientOperations = ({
  clients,
  setClients,
  resetForm,
  setIsAddClientOpen,
  setIsEditClientOpen,
  setIsDeleteClientOpen,
  setSelectedClient,
}: UseClientOperationsProps) => {
  
  const handleAddClient = async (formData: FormData) => {
    console.log('Adding client with formData:', formData);
    // Simple validation
    if (!formData.companyName || !formData.email || !formData.selectedServiceId) {
      toast.error('Preencha todos os campos obrigatórios');
      return;
    }

    const selectedService = services.find(s => s.id === formData.selectedServiceId);
    
    if (!selectedService) {
      toast.error('Selecione um serviço válido');
      return;
    }

    const newClient: Omit<Client, 'id'> = {
      companyName: formData.companyName,
      tradeName: formData.tradeName || '',
      document: formData.document || '',
      email: formData.email,
      phone: formData.phone || '',
      address: formData.address || '',
      startDate: formData.startDate,
      endDate: formData.endDate,
      loyaltyMonths: formData.loyaltyMonths,
      value: formData.value,
      dueDay: formData.dueDay,
      services: [
        {
          id: '', // Will be generated by the database
          clientId: '', // Will be set by the database
          serviceId: formData.selectedServiceId,
          service: selectedService,
          locationIds: formData.locationIds,
          startDate: formData.startDate,
          endDate: formData.endDate,
          value: formData.value,
        },
      ],
    };

    try {
      console.log('Sending client to Supabase:', newClient);
      const addedClient = await addClientToSupabase(newClient);
      
      if (addedClient) {
        console.log('Client added successfully:', addedClient);
        setClients(prev => [...prev, addedClient]);
        setIsAddClientOpen(false);
        resetForm();
        toast.success('Cliente adicionado com sucesso!');
      } else {
        console.error('Failed to add client, no response from API');
        toast.error('Erro ao adicionar cliente');
      }
    } catch (error) {
      console.error('Error in handleAddClient:', error);
      toast.error('Erro ao adicionar cliente');
    }
  };

  const handleEditClient = async (formData: FormData, selectedClient: Client | null) => {
    console.log('Editing client with formData:', formData);
    console.log('Selected client:', selectedClient);
    
    if (!selectedClient) {
      console.error('No selected client to edit');
      return;
    }

    // Simple validation
    if (!formData.companyName || !formData.email) {
      toast.error('Preencha todos os campos obrigatórios');
      return;
    }

    // Find the selected service
    const selectedService = formData.selectedServiceId 
      ? services.find(s => s.id === formData.selectedServiceId)
      : (selectedClient.services[0]?.service || null);

    if (!selectedService) {
      toast.error('Selecione um serviço válido');
      return;
    }

    // Update client service if service changed
    const updatedServices = selectedClient.services.length > 0 ? [...selectedClient.services] : [];
    
    if (updatedServices.length === 0 && formData.selectedServiceId) {
      // Add new service if none exists
      updatedServices.push({
        id: '', // Will be generated by the database
        clientId: selectedClient.id,
        serviceId: formData.selectedServiceId,
        service: selectedService,
        locationIds: formData.locationIds || [],
        startDate: formData.startDate,
        endDate: formData.endDate,
        value: formData.value,
      });
    } else if (updatedServices.length > 0 && formData.selectedServiceId) {
      // Update existing service
      updatedServices[0] = {
        ...updatedServices[0],
        serviceId: formData.selectedServiceId,
        service: selectedService,
        locationIds: formData.locationIds || updatedServices[0].locationIds,
        startDate: formData.startDate,
        endDate: formData.endDate,
        value: formData.value,
      };
    }

    const updatedClient: Client = {
      ...selectedClient,
      companyName: formData.companyName,
      tradeName: formData.tradeName || '',
      document: formData.document || '',
      email: formData.email,
      phone: formData.phone || '',
      address: formData.address || '',
      startDate: formData.startDate,
      endDate: formData.endDate,
      loyaltyMonths: formData.loyaltyMonths,
      value: formData.value,
      dueDay: formData.dueDay,
      services: updatedServices,
    };

    try {
      console.log('Sending updated client to Supabase:', updatedClient);
      const updatedDbClient = await updateClientInSupabase(updatedClient);
      
      if (updatedDbClient) {
        console.log('Client updated successfully:', updatedDbClient);
        setClients(prev => prev.map(client => 
          client.id === selectedClient.id ? updatedDbClient : client
        ));
        setIsEditClientOpen(false);
        setSelectedClient(null);
        resetForm();
        toast.success('Cliente atualizado com sucesso!');
      } else {
        console.error('Failed to update client, no response from API');
        toast.error('Erro ao atualizar cliente');
      }
    } catch (error) {
      console.error('Error in handleEditClient:', error);
      toast.error('Erro ao atualizar cliente');
    }
  };

  const handleDeleteClient = async (selectedClient: Client | null) => {
    console.log('Deleting client:', selectedClient);
    
    if (!selectedClient) {
      console.error('No selected client to delete');
      return;
    }

    try {
      console.log('Sending delete request to Supabase for client ID:', selectedClient.id);
      const success = await deleteClientFromSupabase(selectedClient.id);
      
      if (success) {
        console.log('Client deleted successfully');
        setClients(prev => prev.filter(client => client.id !== selectedClient.id));
        setIsDeleteClientOpen(false);
        setSelectedClient(null);
        toast.success('Cliente removido com sucesso!');
      } else {
        console.error('Failed to delete client');
        toast.error('Erro ao remover cliente');
      }
    } catch (error) {
      console.error('Error in handleDeleteClient:', error);
      toast.error('Erro ao remover cliente');
    }
  };

  return {
    handleAddClient,
    handleEditClient,
    handleDeleteClient,
  };
};
